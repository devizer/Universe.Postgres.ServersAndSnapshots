variables:
  NUGET_VERSION: 0.1

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '**'

jobs:

- job: PG
  pool:
    vmImage: '$(IMAGE)'
  timeoutInMinutes: 20
  strategy:
    maxParallel: 10
    matrix:
      'vDefault on Windows 2022':
        IMAGE: "windows-2022"
      'vDefault on Windows 2019':
        IMAGE: "windows-2019"
      'v14 (tiny portable) on Windows 2019':
        IMAGE: "windows-2019"
        PG_PORTABLE_WINDOWS: 14.6-x64-tiny
      'v9 (tiny portable) on Windows 2019':
        IMAGE: "windows-2019"
        PG_PORTABLE_WINDOWS: 9.6.24-x64-tiny
      'v9 on Windows 2019':
        IMAGE: "windows-2019"
        PG_WINDOWS: postgresql9
      'v10 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql10
      'v11 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql11
      'v12 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql12
      'v13 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql13
      'v14 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql14
      'v15 on Windows 2022':
        IMAGE: "windows-2022"
        PG_WINDOWS: postgresql15
      
      'v16 (devel) on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 16
      
      'v15 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 15
      
      'v14 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 14
      
      'v13 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 13
      
      'v12 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 12
      
      'v11 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 11
      
      'v10 on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        PG_LINUX: 10
      
      'vDefault on Ubuntu 22.04':
        IMAGE: "ubuntu-22.04"
      
      'vDefault on Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
      
      'vDefault on Ubuntu 18.04':
        IMAGE: "ubuntu-18.04"

  steps:

  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "Install DotNet"
      export DOTNET_VERSIONS="5.0 6.0 7.0"
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; test -s /usr/share/dotnet/dotnet && sudo ln -f -s /usr/share/dotnet/dotnet /usr/local/bin/dotnet
      Say "ENVIRONMENT"
      printenv | sort
      Say ".NET SDKs"
      dotnet --list-sdks
      Say "Locales"
      locale -a
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    displayName: 'Bootstrap on Linux'

  - bash: |
      Say "Installing Postgres v$PG_LINUX on Linux"
      sudo rm -rf /etc/postgresql /var/lib/postgresql
      sudo apt-get install -y -qq postgresql-common gnupg |& ( grep Setting || true; )
      sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -p -v $PG_LINUX -i |& tee $SYSTEM_ARTIFACTSDIRECTORY/postgres-0-installing.txt
      
      # Debug
      find /usr/lib/postgresql > $SYSTEM_ARTIFACTSDIRECTORY/postgres-$PG_LINUX-files.txt
      Say "initdb version"
      /usr/lib/postgresql/$PG_LINUX/bin/initdb --version
      Say "pg_ctl version"
      /usr/lib/postgresql/$PG_LINUX/bin/pg_ctl --version
    condition: ne(variables['PG_LINUX'], '')
    displayName: 'Postgres on Linux'

  - script: |
      @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
      choco install --no-progress --params '/Password:test' %PG_WINDOWS% -my
    condition: ne(variables['PG_WINDOWS'], '')
    displayName: 'Postgres on Windows'

  - bash: |
      file="postgres-${PG_PORTABLE_WINDOWS}-windows.7z"
      url="https://master.dl.sourceforge.net/project/postgres-binaries/$file?viasf=1"
      url="https://sourceforge.net/projects/postgres-binaries/files/$file/download"
      pushd ~
      curl -kSL -o "$file" "$url"
      7z x -y -o"C:\Program Files\PostgreSQL\${PG_PORTABLE_WINDOWS}" "$file"
      popd
      pushd "C:\Program Files\PostgreSQL\${PG_PORTABLE_WINDOWS}"
      echo PWD: $PWD
      dir -laR .
      popd 
      # dir /b /s "C:\Program Files\PostgreSQL\${PG_PORTABLE_WINDOWS}"
    condition: ne(variables['PG_PORTABLE_WINDOWS'], '')
    displayName: 'Postgres Portable on Windows'

  - bash: |
      set -eu; set -o pipefail
      if [[ "${AGENT_OS:-}" == Linux ]]; then
        export PG_SERVER_LOCALES='en_US.utf8 C.UTF-8 C -'
        Say "[LINUX] Assign PG_SERVER_LOCALES='$PG_SERVER_LOCALES'";
      else
        export PG_SERVER_LOCALES='en-US de-DE fr-FR it-IT -'
        echo "[WINDOWS] Assign PG_SERVER_LOCALES='$PG_SERVER_LOCALES'"; echo ""
      fi
      dotnet restore || dotnet restore --disable-parallel
      dotnet test --collect:"XPlat Code Coverage" --logger trx
    displayName: 'Test All'

  - bash: |
      set -eu; set -o pipefail
      d=$PWD
      pushd "$(System.ARTIFACTSDIRECTORY)"
      7z a -mx=1 "Source-$(Agent.JobName).7z" "$d"
      popd
    condition: succeededOrFailed()
    displayName: 'Prepare Artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'

  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/coverage.cobertura.xml'
