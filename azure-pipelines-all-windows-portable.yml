variables:
  NUGET_VERSION: 0.1
  PS1_TROUBLE_SHOOT: On

trigger:
  branches:
    include:
    - main

jobs:

- job: Install
  pool:
    vmImage: '$(IMAGE)'
  timeoutInMinutes: 100
  strategy:
    maxParallel: 4
    matrix:
      'Tiny on 2019':
        IMAGE: 'windows-2019'
        PGTYPE: tiny
      'Full on 2019':
        IMAGE: 'windows-2019'
        PGTYPE: full
      'Tiny on 2022':
        IMAGE: 'windows-2022'
        PGTYPE: tiny
      'Full on 2022':
        IMAGE: 'windows-2022'
        PGTYPE: full

  steps:

  - powershell: |
      iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/devizer/Universe.Postgres.ServersAndSnapshots/refs/heads/main/PostgreSQL-Version-Management/Install-PostgreSQL-Version-Management.ps1'))
    condition: succeededOrFailed()
    displayName: 'Install Module'

  - powershell: |
      Setup-PostgreSQL-Server -Version "16.4-x64" -Mode Service -ServiceId "PGSQL`$TMP" -Port 1111 `
                              -BinFolder c:\pg\b -DataFolder c:\pg\d -LogFolder c:\pg\l
      & net stop PGSQL`$TMP
    condition: succeededOrFailed()
    displayName: 'Invoke Module'

  - pwsh: |
      get-module -listavailable | ft Name, ModuleBase, Path -AutoSize | out-string -width 4096
    condition: succeededOrFailed()
    displayName: 'List Modules Core'

  - powershell: |
      get-module -listavailable | ft Name, ModuleBase, Path  -AutoSize | out-string -width 4096
    condition: succeededOrFailed()
    displayName: 'List Modules Desktop'

  - pwsh: |
      remove-module PostgreSQL-Version-Management -force -EA Continue
      $toRemove = "PostgreSQL-Version-Management"; Get-Module -ListAvailable | ? { $_.Name -eq "$toRemove" } | % { $_.ModuleBase } | % { Write-Host "Remiving Module `"$_`""; Remove-Item -Recurse -Force $_ }
    condition: succeededOrFailed()
    displayName: 'Remove Module Core'

  - powershell: |
      remove-module PostgreSQL-Version-Management -force -EA Continue
      $toRemove = "PostgreSQL-Version-Management"; Get-Module -ListAvailable | ? { $_.Name -eq "$toRemove" } | % { $_.ModuleBase } | % { Write-Host "Remiving Module `"$_`""; Remove-Item -Recurse -Force $_ }
    condition: succeededOrFailed()
    displayName: 'Remove Module Desktop'

  - powershell: |
      Get-Command Setup-PostgreSQL-Server
      $_ = "ok";
    condition: succeededOrFailed()
    displayName: 'Is Module Missing'

  - powershell: |
      $cpuName=(Get-WmiObject Win32_Processor).Name
      Write-Host "CPU: $($cpuName), $([System.Environment]::ProcessorCount) Cores"

      cd Postgres-Version-Manager
      powershell -f Force-Install-Aria2c.ps1; aria2c --version;

    displayName: 'Bootstrap'

  - bash: |
       cd Postgres-Version-Manager
       powershell -f "[Test] Install All Postgres Versions.ps1"
    condition: succeededOrFailed()
    displayName: 'Install $(PGTYPE)'

  - bash: |
       cd Postgres-Version-Manager
       powershell -f "[Test] Install All Postgres Versions.ps1"
    condition: succeededOrFailed()
    displayName: 'RE-Install $(PGTYPE)'

  - powershell: |
       Get-Service | where { $_.name -like "PGSQL`$*" } | ft -AutoSize
       gdr -PSProvider 'FileSystem'
       get-wmiobject -class "Win32_PageFileUsage" -namespace "root\CIMV2" | ft Name, CurrentUsage, PeakUsage, AllocatedBaseSize -AutoSize
    condition: succeededOrFailed()
    displayName: 'Show PGSQL Servers'

  - bash: |
      set -eu; set -o pipefail
      d=$PWD
      pushd "$(System.ARTIFACTSDIRECTORY)"
      7z a -mx=1 -ms=on -mqs=on "Source-$(Agent.JobName).7z" "$d"
      popd
    condition: succeededOrFailed()
    displayName: 'Prepare Artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

